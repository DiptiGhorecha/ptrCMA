<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictitle.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>