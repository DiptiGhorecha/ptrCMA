<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictitle.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAA3UAAAAfCAYAAABAieSBAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADtGlUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXBSaWdodHM9Imh0dHA6Ly9ucy5hZG9i
        ZS5jb20veGFwLzEuMC9yaWdodHMvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAv
        MS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNv
        dXJjZVJlZiMiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1wUmlnaHRz
        Ok1hcmtlZD0iVHJ1ZSIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjAyMDYzMTI0ODZD
        RkU3MTFCRkEyREE4MTBDMUE1M0Y2IiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjJDNUY2OEQ2REYy
        RjExRTdBRDM4QUY5NDIxNjY2QkNDIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjJDNUY2OEQ1REYy
        RjExRTdBRDM4QUY5NDIxNjY2QkNDIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzYg
        KFdpbmRvd3MpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6ODE4
        QUVENDJGMEQ4RTcxMUE3NDRCQTQ4MDY0ODUzNzQiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6MDIw
        NjMxMjQ4NkNGRTcxMUJGQTJEQTgxMEMxQTUzRjYiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJE
        Rj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5CYxhxAAAOiElEQVR4Xu2dTY8cVxWG+x/A
        wl7wEyKxAQk2kYjEJhvEHgNCCBAgpATJCf4I2Rjb2FEE8UQRYTPB0/Mhz4CdDRIKRCKEhREEsUBBwpFd
        1dPpbk+3HTkZz4gV3HfsEx0f7lfVVPf0dL+L8oynqm7de857q85T595brbIsW9g23dZ5+Lv7/yfc9oTb
        nnbbz9y26LZlt7W50QbUADVADVAD1AA1QA1QA9QANUANjFUDS86+v3TbBbc99ZDNwGh7zAZ2E47Dz4//
        8xDqjnTK4li3LF69UXbW3u4Olq/2Ru3Lg7vtxcEH3GgDaoAaoAaoAWqAGqAGqAFqgBqgBiagATAYWAxM
        BjYDo4HVHNQdCUKd2/mZXlmcebezubHeH62dGd5vnx7ttH/MjTagBqgBaoAaoAaoAWqAGqAGqAFq4EA0
        ACYDm4HRwGpgNrDb/2Xq3i+LxwflrYtvdfvrL259uHryzg6BjqI9ENHyJQJfpFAD1AA1QA1QA9QANUAN
        UAOPagBgB0YDq4HZwG5gOAG7lkvjPdYvivNvdgcbL2x95IBud+k5Ag2BhhqgBqgBaoAaoAaoAWqAGqAG
        qIGp0QAYDawGZgO7geHAcptl0Wo5wnvmb5u9lVe27q2dcAedGu1OTcVJ6HxLQw1QA9QANUANUAPUADVA
        DVAD1MADDZx2rAawW3Dsdn2zt+qg7lkHdUdbZVEstAd3rzw/2lkh0LHDsMNQA7Omge/+9Ow/v/ntr/Zk
        q9q+H/3jX9e+//LC33UZ33nuxL+rlsPj56dvaa1Af/T9eH1//M9/+a22+Q9e+9V1bXP6Y7z2p75pX2pg
        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
        QmCC
</value>
  </data>
</root>