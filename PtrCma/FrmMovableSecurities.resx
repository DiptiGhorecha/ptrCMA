<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictitle.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>