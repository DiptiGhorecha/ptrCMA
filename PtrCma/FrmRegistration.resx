<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictitle.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAy0AAAAfCAYAAADqSiI9AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADImlUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20v
        eGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxu
        czpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1w
        OkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M2IChXaW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJ
        RD0ieG1wLmlpZDo2ODcyQ0Q2NkRFNDQxMUU3QjAwMURBNTExQUNERkEzOCIgeG1wTU06RG9jdW1lbnRJ
        RD0ieG1wLmRpZDo2ODcyQ0Q2N0RFNDQxMUU3QjAwMURBNTExQUNERkEzOCI+IDx4bXBNTTpEZXJpdmVk
        RnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjY4NzJDRDY0REU0NDExRTdCMDAxREE1MTFBQ0RG
        QTM4IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjY4NzJDRDY1REU0NDExRTdCMDAxREE1MTFBQ0RG
        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
        AElFTkSuQmCC
</value>
  </data>
</root>