<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictitle.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAy0AAAAfCAYAAADqSiI9AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADImlUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS4zLWMwMTEgNjYuMTQ1NjYxLCAyMDEyLzAyLzA2LTE0OjU2OjI3ICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20v
        eGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxu
        czpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1w
        OkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M2IChXaW5kb3dzKSIgeG1wTU06SW5zdGFuY2VJ
        RD0ieG1wLmlpZDpGMTBCMDE3MkRFNTQxMUU3OUNGNkIyMTVDOEJGNEVGNiIgeG1wTU06RG9jdW1lbnRJ
        RD0ieG1wLmRpZDpGMTBCMDE3M0RFNTQxMUU3OUNGNkIyMTVDOEJGNEVGNiI+IDx4bXBNTTpEZXJpdmVk
        RnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkYxMEIwMTcwREU1NDExRTc5Q0Y2QjIxNUM4QkY0
        RUY2IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkYxMEIwMTcxREU1NDExRTc5Q0Y2QjIxNUM4QkY0
        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
</value>
  </data>
</root>